{"version":3,"sources":["EventListener.js","App.js","serviceWorker.js","index.js"],"names":["EventListener","this","getListeners","forEach","type","listener","props","eventTarget","addEventListener","removeEventListener","Object","keys","filter","key","startsWith","map","slice","toLowerCase","React","Component","App","state","youtubeurl","time","replayNum","replayDuration","caption","speed","onChangeUrl","bind","onChangeTime","onChangeReplayNum","onChangeReplayDuration","onReplay","onReplay5","setTextInputRef","element","textInput","initialFocus","focus","blur","window","scrollTo","e","replace","target","value","setState","loadVideoById","seekTo","indexOf","getPlayerState","console","log","playVideo","onReplay5SetInterval","remainNum","num","timer","setInterval","getCurrentTime","clearInterval","obj","toString","call","event","prototype","nodeType","typeOf","pauseVideo","setPlaybackRate","className","document","keydown","keyProc","id","style","position","top","left","backgroundColor","width","height","display","name","size","ref","onChange","onClick","overflowY","title","onLoad","src","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5df60149.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class EventListener extends React.Component {\n  static propTypes = {\n    eventTarget: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    // イベントの設定\n    this.getListeners().forEach( ( [ type, listener ] ) => {\n      this.props.eventTarget.addEventListener( type, listener );\n    } );\n  }\n\n  componentWillUnmount() {\n    // イベントの設定解除\n    this.getListeners().forEach( ( [ type, listener ] ) => {\n      this.props.eventTarget.removeEventListener( type, listener );\n    } );\n  }\n\n  getListeners() {\n    // propsから、イベント名と関数を抽出\n    let o= Object\n      .keys( this.props )\n      .filter( key => (key.startsWith( 'on' ) || key===\"keydown\" ))\n\t\t\t.map( key => {\n\t\t\t\tif(key.startsWith( 'on' )){\n\t\t\t\t\treturn [ key.slice( 2 ).toLowerCase(), this.props[key] ];\n\t\t\t\t}else{\n\t\t\t\t\treturn [ key, this.props[key] ];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn o;\n  }\n\n  render() {\n    return null; // 何も描画しない\n  }\n}","import React from 'react';\nimport './App.css';\nimport EventListener from './EventListener';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      youtubeurl: \"blb3X5zpdpU\",\n      time: 102,\n      replayNum: 5,\n      replayDuration: 6,\n      caption: true,\n      speed: 1\n    }\n    this.onChangeUrl = this.onChangeUrl.bind(this);\n    this.onChangeTime = this.onChangeTime.bind(this);\n    this.onChangeReplayNum = this.onChangeReplayNum.bind(this);\n    this.onChangeReplayDuration = this.onChangeReplayDuration.bind(this);\n\n    this.onReplay = this.onReplay.bind(this);\n    this.onReplay5 = this.onReplay5.bind(this);\n    this.setTextInputRef = element => {\n      this.textInput = element;\n    };\n    this.initialFocus = () => {\n      // Focus the text input using the raw DOM API\n      if (this.textInput) this.textInput.focus();\n      this.textInput.blur();\n      window.scrollTo(0, 0);\n    };\n  }\n\n  onChangeUrl(e) {\n    const newLocal = e.target.value;\n    const replace = newLocal.replace(/.*=/g, '');\n    this.setState({ youtubeurl: replace, time: 0 }, () => {\n      window['XXXXX'].loadVideoById(this.state.youtubeurl, this.state.time);\n      this.initialFocus()\n    })\n  }\n  onChangeTime(e) {\n    this.setState({ time: e.target.value });\n  }\n  onChangeReplayNum(e) {\n    this.setState({ replayNum: e.target.value });\n  }\n  onChangeReplayDuration(e) {\n    this.setState({ replayDuration: e.target.value });\n  }\n\n  onReplay(e) {\n    window['XXXXX'].seekTo(this.state.time, true);\n    if ([-1, 0, 2, 5].indexOf(window['XXXXX'].getPlayerState()) >= 0) {\n      console.log(\"playvideo\");\n      window['XXXXX'].playVideo();\n    }\n  }\n  onReplay5(e) {\n    this.onReplay()\n    this.onReplay5SetInterval(this.state.replayNum-1);\n  }\n  onReplay5SetInterval(remainNum) {\n    let num=0;\n    let timer=setInterval(()=>{\n      if(window['XXXXX'].getCurrentTime()>this.state.time+this.state.replayDuration){\n        if(remainNum>0){\n          this.onReplay();\n          this.onReplay5SetInterval(remainNum-1);\n        }\n        console.log(\"clearInterval\")\n        clearInterval(timer)\n      } \n      //0.1*2000回=200秒間タイマーが続いたら削除\n      if(num++>2000){\n        console.log(\"clearInterval exceed\")\n        clearInterval(timer)\n      }    \n    },1000)\n  }\n  typeOf(obj) {\n    return toString.call(obj).slice(8, -1).toLowerCase();\n  }\n  keyProc(key, event) {\n    console.log(key + \" pressed\")\n    console.log(Object.prototype.toString.call(event.target))\n    console.log(event.target.nodeType)\n    console.log(this.typeOf(event.target))\n    if (this.typeOf(event.target) !== \"htmlbodyelement\") {\n      console.log(\"bodyではないためkeyevent無視\");\n      return;\n    }\n    if (key === \"k\") {\n      console.log(\"state:\" + window['XXXXX'].getPlayerState())\n      //https://developers.google.com/youtube/iframe_api_reference#Playback_status\n      if ([-1, 0, 2, 5].indexOf(window['XXXXX'].getPlayerState()) >= 0) {\n        console.log(\"playvideo\");\n        window['XXXXX'].playVideo();\n      }\n      if ([1].indexOf(window['XXXXX'].getPlayerState()) >= 0) {\n        window['XXXXX'].pauseVideo();\n      }\n    }\n    if (key === \"c\") {\n      this.setState({ caption: !this.state.caption });\n    }\n    if (key === \"s\") {\n      if (this.state.speed === 1) {\n        window['XXXXX'].setPlaybackRate(0.25)\n        this.setState({ speed: 0.25 });\n      } else {\n        window['XXXXX'].setPlaybackRate(1)\n        this.setState({ speed: 1 });\n      }\n    }\n    if (key === \"r\") {\n      this.onReplay();\n    }\n    if (key === \"l\") {\n      this.onReplay5();\n    }\n    if (key === \"t\") {\n      this.setState({ time: window['XXXXX'].getCurrentTime() });\n    }\n    if (key === \"j\" || key === \"ArrowLeft\") {\n      window['XXXXX'].seekTo((window['XXXXX'].getCurrentTime() - 2), true);\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <EventListener\n          eventTarget={document}\n          keydown={(event) => this.keyProc(event.key, event)}\n        />\n        <div id=\"hidecap\" style={{\n          position: \"absolute\", top: \"370px\", left: \"0px\", backgroundColor: \"#CCCCFF\",\n          width: \"700px\",\n          height: \"70px\",\n          display: (this.state.caption ? \"none\" : \"\")\n        }}></div>\n        {/* <iframe id=\"youtube\" src={this.state.youtubeurl + \"&t=\" + this.state.time} width=\"1300\" height=\"500\"></iframe> */}\n        <input type=\"text\" name=\"youtubeurl\" size=\"100\" ref={this.setTextInputRef} value={this.state.youtubeurl} onChange={this.onChangeUrl}></input>\n        <input type=\"text\" name=\"time\" size=\"20\" value={this.state.time} onChange={this.onChangeTime}></input>\n        <input type=\"text\" name=\"replayNum\" size=\"20\" value={this.state.replayNum} onChange={this.onChangeReplayNum}></input>\n        <input type=\"text\" name=\"replayDuration\" size=\"20\" value={this.state.replayDuration} onChange={this.onChangeReplayDuration}></input>\n        <button type=\"button\" onClick={this.onReplay}>replay</button>\n        <button type=\"button\" onClick={this.onReplay5}>replayNum</button>\n        <div id=\"wrapper\" style={{\n          height: \"400px\",\n          overflowY: \"scroll\"\n        }}>\n          <iframe title=\"translate\" onLoad={this.initialFocus} src=\"https://translate.google.co.jp/\" width=\"1000\" height=\"500\"></iframe>\n          <iframe title=\"deepl\" onLoad={this.initialFocus} src=\"https://www.deepl.com/ja/translator\" width=\"1000\" height=\"500\"></iframe>\n        </div>\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}